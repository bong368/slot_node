{
  "_args": [
    [
      {
        "raw": "espeak",
        "scope": null,
        "escapedName": "espeak",
        "name": "espeak",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/pi/slot/slot_node"
    ]
  ],
  "_from": "espeak@latest",
  "_id": "espeak@0.0.3",
  "_inCache": true,
  "_location": "/espeak",
  "_npmUser": {
    "name": "freewil",
    "email": "sean@eternalrise.com"
  },
  "_npmVersion": "1.2.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "espeak",
    "scope": null,
    "escapedName": "espeak",
    "name": "espeak",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/espeak/-/espeak-0.0.3.tgz",
  "_shasum": "d63d56170d91a1751cdf5f859efeb80b98b2ed6b",
  "_shrinkwrap": null,
  "_spec": "espeak",
  "_where": "/home/pi/slot/slot_node",
  "author": {
    "name": "Sean Lavine",
    "email": "sean@eternalrise.com"
  },
  "bugs": {
    "url": "https://github.com/freewil/node-espeak/issues"
  },
  "dependencies": {},
  "description": "text-to-speech using espeak cli program",
  "devDependencies": {
    "coffee-script": "~1.4.0",
    "mocha": "~1.4.0"
  },
  "directories": {},
  "dist": {
    "shasum": "d63d56170d91a1751cdf5f859efeb80b98b2ed6b",
    "tarball": "https://registry.npmjs.org/espeak/-/espeak-0.0.3.tgz"
  },
  "engines": {
    "node": ">=0.6.x <0.9.0"
  },
  "homepage": "https://github.com/freewil/node-espeak#readme",
  "keywords": [
    "espeak",
    "speech",
    "speak"
  ],
  "license": "MIT",
  "main": "./index",
  "maintainers": [
    {
      "name": "freewil",
      "email": "sean@eternalrise.com"
    }
  ],
  "name": "espeak",
  "optionalDependencies": {},
  "readme": "# node-espeak\n\n\n[![Build Status](https://secure.travis-ci.org/freewil/node-espeak.png)](http://travis-ci.org/freewil/node-espeak)\n\nThis simply uses the [eSpeak](http://espeak.sourceforge.net/) cli program to \ngenerate wav audio data from text strings. You can then use the raw binary data \nto output to a file, send as a http download, get as a base64-encoded data URI \nstring, or whatever else.\n\n## Install\n\n```\n$ npm install espeak\n```\n\n## Usage\n\n```js\nvar espeak = require('espeak');\n\n// optionally set the path to the `espeak` cli program if it's not in your PATH\n//espeak.cmd = '/usr/bin/espeak';\n\nespeak.speak('hello world', function(err, wav) {\n  if (err) return console.error(err);\n  \n  // get the raw binary wav data\n  var buffer = wav.buffer;\n  \n  // get a base64-encoded data URI\n  var dataUri = wav.toDataUri();\n});\n\n// optionally add custom cli arguments for things such as pitch, speed, wordgap, etc.\nespeak.speak('hello world, slower', ['-p 60', '-s 90', '-g 30'], function(err, wav) {});\n\n```\n\n## Related Modules\nThere are some related modules, although there seems to be some scattered\nforks and it wasn't clear to the author which was updated and/or compatible with\nNode.js/npm at the time of writing this.\n\n* speak.js\n  * [kripken / speak.js](https://github.com/kripken/speak.js) \n  * [christopherdebeer / speak.js](https://github.com/christopherdebeer/speak.js)\n  * [katsuyan / speak.js](https://github.com/katsuyan/speak.js)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/freewil/node-espeak.git"
  },
  "scripts": {
    "prepublish": "coffee -c index.coffee",
    "test": "mocha"
  },
  "version": "0.0.3",
  "warnings": [
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">=0.6.x <0.9.0"
      },
      "pkgid": "espeak@0.0.3"
    },
    {
      "code": "ENOTSUP",
      "required": {
        "node": ">=0.6.x <0.9.0"
      },
      "pkgid": "espeak@0.0.3"
    }
  ]
}
